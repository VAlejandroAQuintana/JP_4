/* Generated By:JavaCC: Do not edit this line. JavaPlus.java */
    //package compilador;

    import java.io.*;
    import java.util.*;

    public class JavaPlus implements JavaPlusConstants {

        private static final String NAME = JavaPlus.class.getSimpleName();
        private static final String PROGRAM = "." + File.separatorChar + NAME;
        private static int index = 0;

        private static String source_file = "";
                private static String source_file2 = "";



        private final Integer[] SENTENCES_BEGIN = new Integer[]
        {LEER, IMPRIMIR, CASE, FOR, WHILE, IF, ENTERO, FLOAT, STRING};

        // Lista de errores
        private static final ArrayList<String> errores = new ArrayList<String>();

        private static void setSourceFile(String[] args){

            if(source_file.isEmpty()){

                if(args.length < index + 1){

                    System.err.println("ERROR: Debe de ingresar el archivo del c\u00f3digo fuente.");
                    System.out.println();
                    System.exit(-1);
                }

                source_file = args[index++];
                // index = 2
            }
            ensureSourceExists();

        }

        private static void ensureSourceExists(){
            File file = new File(source_file);
            if(!file.exists()){

                System.err.println("ERROR: El archivo " + source_file + " no existe.");
                System.out.println();
                System.exit(-1);
            }

        }

        private static boolean checkLex(boolean debug){

            try {

                FileReader sourceFileReader = new FileReader(source_file);


                // Instanciar objeto de TokenManager y obtener todos los tokens. Ej:
                JavaPlusTokenManager lexico = new JavaPlusTokenManager(new SimpleCharStream(sourceFileReader));

                Token t = lexico.getNextToken();
                while(t.kind != JavaPlusTokenManager.EOF) {
                    try {

                        if (t.kind == JavaPlusTokenManager.INVALIDO)
                            throw new TokenMgrError("Error l\u00e9xico en l\u00ednea " +
                                    t.beginLine + ", columna " + t.beginColumn +
                                    ". Se encontr\u00f3 s\u00edmbolo inv\u00e1lido '" + t.image + "'.\n        " +
                                    "Posible soluci\u00f3n: Remover s\u00edmbolo.", TokenMgrError.LEXICAL_ERROR);

                        if (t.kind == JavaPlusTokenManager.NUMERO_INVALIDO)
                            throw new TokenMgrError("Error l\u00e9xico en l\u00ednea " +
                                    t.beginLine + ", columna " + t.beginColumn +
                                    ". Se encontr\u00f3 un n\u00famero inv\u00e1lido '" + t.image + "'.\n        " +
                                    "Posible soluci\u00f3n: Remover o revisar n\u00famero.", TokenMgrError.LEXICAL_ERROR);

                        if(debug)
                            System.out.println(t.image);

                    } catch (TokenMgrError ex) {
                        errores.add(ex.getMessage());
                    } finally {
                        t = lexico.getNextToken();

                    }
                }

            } catch (FileNotFoundException ex) {
                System.err.println("Ha ocurrido un problema con el archivo le\u00eddo.");
                System.exit(-1);
            }

            return errores.isEmpty();

        }

        //Verifica si tiene errores con la lectura del archivo de
        private static boolean checkSyntax() {

            if (!checkLex(false)) return false;

            try {
                FileReader sourceFileReader = new FileReader(source_file);

                JavaPlus sintactico = new JavaPlus(sourceFileReader);
                sintactico.Principal();

            } catch (FileNotFoundException ex) {
                System.err.println("Ha ocurrido un problema con el archivo le\u00eddo.");
                System.exit(-1);
            } catch (ParseException ex) {
                processError(ex, "programa principal");
            }

            return errores.isEmpty();
        }

        //verificacion de secuencia de compilacion en caso de ser correcta o incorrecta
        public static void main(String[] args) {

            if (args.length > 0) {
                source_file = args[index];
                index++;
            } else {
                System.err.println("Error: No se proporcion\u00f3 un archivo fuente.");
                System.exit(-1);
            }

            setSourceFile(args);

            // Revisar fase sintactica
            if(checkSyntax()){
                if(TokenAsignaciones.getErr()>0){
                    System.out.println("Total de errores sem\u00e1nticos: " + TokenAsignaciones.getErr());
                }
                else{
                    System.out.println("An\u00e1lisis correcto.");
                    CToIntermediateCodeConverter.convertir(source_file);
                    ICToObject.convertir("intermedio.txt");
                    source_file2 = source_file.replaceAll(".txt","");

                    int nc = 0;
                    for (int i = 0; i <= source_file2.length()-1; i++) {
                        nc++;
                    }

                    if(nc-1 > 5){
                        nc=5;
                    }
                    //System.out.println(nc);

                    String fileNameWOF = "";
                    for (int i = 0; i <= nc-1; i++) {
                        fileNameWOF = fileNameWOF + source_file2.charAt(i);
                    }

                    OCToAssembler.convertir("objeto.txt","declaraciones.txt",fileNameWOF);

                    String cadenaRetorno="";
                    try{
                            Runtime tiempoEjecucion = Runtime.getRuntime();
                            Process proceso = tiempoEjecucion.exec("cmd.exe /C " + "ml " +  fileNameWOF + ".asm");

                            InputStream is = proceso.getInputStream();
                            InputStreamReader isr = new InputStreamReader(is);
                            BufferedReader br = new BufferedReader(isr);

                            System.out.println("Archivo " + fileNameWOF + ".exe generado.");

                            String linea;
                            while ((linea = br.readLine()) != null){
                                    cadenaRetorno = cadenaRetorno.concat(linea) + "\n";
                            }
                            br.close();
                    }catch(IOException e){
                        System.out.println("No se pudo generar el archivo ejecutable.");
                            e.printStackTrace();
                    }
                    //System.out.println(cadenaRetorno);




                    System.exit(0);
                }
            }
            else{
                if(TokenAsignaciones.getErr()>0){
                    System.out.println("Total de errores sem\u00e1nticos: " + TokenAsignaciones.getErr() + "\n \n");
                }

                for (int i = 0; i < errores.size(); i++) {
                    System.out.print(i+1 + ". ");
                    System.err.println(errores.get(i));
                    System.out.println();
                }
                System.err.println("Total de errores sint\u00e1cticos: " + errores.size() + "\n");
            }

            setSourceFile(args);
            System.exit(-1);
        }

        //Funcion para saltar a zona segura en caso de error de lectura de token
        private void skipTo(Integer end, Integer... kinds){

            List<Integer> kindsList = Arrays.asList(kinds);

            HashSet<Integer> cKinds = new HashSet<Integer>(kindsList);
            cKinds.add(end);
            cKinds.add(EOF);

            Token oldToken = token;
            boolean sw = true;
            int selectedKind = JavaPlus.EOF;

            do {
                token = getNextToken();

                for (Integer kind : cKinds) {
                    sw &= token.kind != kind;

                    if (!sw) {
                        selectedKind = kind;
                        break;
                    }
                }

            } while (sw);

            if (selectedKind != end) {
                token = oldToken;
                jj_kind = selectedKind;
            }

        }

        //Funcion para almacenar los errores encontrados
        private static void processError(ParseException ex, String from){

            // Tokens esperados
            StringBuilder expected = new StringBuilder();
            int maxSize = 0;

            for (int i = 0; i < ex.expectedTokenSequences.length; i++) {
                if (maxSize < ex.expectedTokenSequences[i].length) {
                    maxSize = ex.expectedTokenSequences[i].length;
                }
                for (int j = 0; j < ex.expectedTokenSequences[i].length; j++) {
                    expected.append(ex.tokenImage[ex.expectedTokenSequences[i][j]]).append(' ');
                }

            }

            Token t = ex.currentToken;

            // Tokens encontrados
            StringBuilder found = new StringBuilder();
            Token tok = t.next;

            for (int i = 0; i < maxSize; i++) {

                if (i != 0) found.append(" ");

                if (tok.kind == 0) {
                    found.append(tokenImage[0]);
                    break;
                }

                found.append(tokenImage[tok.kind]);

                tok = tok.next;
            }

            String[] founds = found.toString().split(" ");
            String[] expecteds = expected.toString().split(" ");

            StringBuilder msg = new StringBuilder();
            msg.append("Error sint\u00e1ctico en ");
            msg.append("l\u00ednea ").append(t.beginLine).append(", columna ").append(t.beginColumn).append('.');

            if (founds.length == 1) {
                msg.append(" Se encontr\u00f3 el s\u00edmbolo ").append(founds[0]).append('.');
            } else {
                msg.append(" Se encontraron los s\u00edmbolos:");
                for (String f : founds) {
                    msg.append(" - ").append(f);
                }
                msg.append('.');
            }

            if (expecteds.length == 1){
                msg.append(" Se esperaba:\n").append(expecteds[0]).append('.');
            } else {
                msg.append(" Se esperaba uno de los siguientes:\n");
                for (String e : expecteds) {
                    msg.append(" - ").append(e);
                }
            }

            errores.add(msg.toString());
        }

  final public void Operadores() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQ:
      jj_consume_token(EQ);
      break;
    case LE:
      jj_consume_token(LE);
      break;
    case GE:
      jj_consume_token(GE);
      break;
    case NE:
      jj_consume_token(NE);
      break;
    case GR:
      jj_consume_token(GR);
      break;
    case MN:
      jj_consume_token(MN);
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public int OpAritmetico() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SUMAR:
      jj_consume_token(SUMAR);
                    {if (true) return 1;}
      break;
    case RESTAR:
      jj_consume_token(RESTAR);
                     {if (true) return 1;}
      break;
    case MULTIPLICAR:
      jj_consume_token(MULTIPLICAR);
                          {if (true) return 1;}
      break;
    case DIVIDIR:
      jj_consume_token(DIVIDIR);
                      {if (true) return 1;}
      break;
    default:
      jj_la1[1] = jj_gen;
            {if (true) return 0;}
         {if (true) return 0;}
    }
    throw new Error("Missing return statement in function");
  }

  final public void TiposDatos() throws ParseException, ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ENTERO:
      jj_consume_token(ENTERO);
      break;
    case STRING:
      jj_consume_token(STRING);
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void TiposAsignaciones() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VARIABLE:
      jj_consume_token(VARIABLE);
      break;
    case NUMERO:
      jj_consume_token(NUMERO);
      break;
    case CADENA:
      jj_consume_token(CADENA);
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Principal() throws ParseException, ParseException {
    TokenAsignaciones.SetTables();
    try {
      jj_consume_token(MAIN);
      jj_consume_token(LLAVE_A);
      Sentencias();
      jj_consume_token(LLAVE_C);
      jj_consume_token(0);
    } catch (ParseException ex) {
        processError(ex, "programa principal");
        skipTo(PUNTO_COMA, SENTENCES_BEGIN);
    }
  }

  final public void Sentencias() throws ParseException {
    try {
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IF:
        case WHILE:
        case IMPRIMIR:
        case LEER:
        case ENTERO:
        case STRING:
        case VARIABLE:
          ;
          break;
        default:
          jj_la1[4] = jj_gen;
          break label_1;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ENTERO:
        case STRING:
          VariablesLocales();
          break;
        case IF:
          SentenciaIf();
          break;
        case WHILE:
          SentenciaWhile();
          break;
        default:
          jj_la1[5] = jj_gen;
          if (jj_2_1(2)) {
            SentenciaAsignacion();
                                            TokenAsignaciones.segunda = 0;
          } else {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case IMPRIMIR:
              SentenciaWrite();
              break;
            case LEER:
              SentenciaRead();
              jj_consume_token(PUNTO_COMA);
              break;
            default:
              jj_la1[6] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
        }
      }
    } catch (ParseException ex) {
        //processError(ex, "sentencia de si");
        skipTo(PUNTO_COMA, LLAVE_C);
    }
  }

//Sentencia de declaración de variables
  final public void VariablesLocales() throws ParseException, ParseException {
        int td;
        Token var;
    try {
      TiposDatos();
                td = token.kind;
      var = jj_consume_token(VARIABLE);
                TokenAsignaciones.InsertarSimbolo(var, td);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASIGNACION:
        VariablesAsignacion(var);
        break;
      default:
        jj_la1[7] = jj_gen;
        ;
      }
      jj_consume_token(PUNTO_COMA);
    } catch (ParseException ex) {
        processError(ex, "sentencia de variables locales");
        skipTo(PUNTO_COMA, SENTENCES_BEGIN);
    }
  }

//Sentencia de asignacion en las declaraciones de variables
  final public void VariablesAsignacion(Token v1) throws ParseException, ParseException {
        Token v2;
        Token v3;
        String res;
        boolean imp = false;
    jj_consume_token(ASIGNACION);
    TiposAsignaciones();
            v2 = token;
            res = TokenAsignaciones.checkAsing(v1, v2);

            if(res != " ")
            {
                System.out.println(res);
                imp = true;
            }
  }

//Sentencia IF
  final public void SentenciaIf() throws ParseException, ParseException {
    try {
      jj_consume_token(IF);
      jj_consume_token(PARENTESIS_A);
      Comparaciones();
      jj_consume_token(PARENTESIS_C);
      jj_consume_token(LLAVE_A);
      Sentencias();
      jj_consume_token(LLAVE_C);
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ELSE:
          ;
          break;
        default:
          jj_la1[8] = jj_gen;
          break label_2;
        }
        SentenciaElse();
      }
    } catch (ParseException ex) {
        processError(ex, "sentencia de si");
        skipTo(PUNTO_COMA, LLAVE_C);
    }
  }

//Sentencia ELSE
  final public void SentenciaElse() throws ParseException, ParseException {
    try {
      jj_consume_token(ELSE);
      jj_consume_token(LLAVE_A);
      Sentencias();
      jj_consume_token(LLAVE_C);
    } catch (ParseException ex) {
        processError(ex, "sentencia de sino");
        skipTo(PUNTO_COMA, LLAVE_C);
    }
  }

//Sentencias de las comparaciones
  final public void Comparaciones() throws ParseException {
    Token v1;
    String res;
    jj_consume_token(VARIABLE);
        v1 = token;
        res = TokenAsignaciones.checkVariable(v1);

        if(res != " "){
            System.out.println(res);
        }
    Operadores();
    jj_consume_token(VARIABLE);
        v1 = token;
        res = TokenAsignaciones.checkVariable(v1);

        if(res != " "){
            System.out.println(res);
        }
  }

  final public void DeclaracionUnaVariable() throws ParseException {
        int td;
        Token var;
    TiposDatos();
                td = token.kind;
    var = jj_consume_token(VARIABLE);
                TokenAsignaciones.InsertarSimbolo(var, td);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASIGNACION:
      VariablesAsignacion(var);
      break;
    default:
      jj_la1[9] = jj_gen;
      ;
    }
  }

//Sentencia DO
  final public void SentenciaDo() throws ParseException, ParseException {
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DO:
        jj_consume_token(DO);
        jj_consume_token(LLAVE_A);
        Sentencias();
        jj_consume_token(LLAVE_C);
        jj_consume_token(WHILE);
        jj_consume_token(PARENTESIS_A);
        Comparaciones();
        jj_consume_token(PARENTESIS_C);
        break;
      case WHILE:
        SentenciaWhile();
        break;
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException ex) {
        processError(ex, "sentencia de Do");
        skipTo(PUNTO_COMA, LLAVE_C);
    }
  }

  final public void SentenciaWhile() throws ParseException, ParseException {
    try {
      jj_consume_token(WHILE);
      jj_consume_token(PARENTESIS_A);
      Comparaciones();
      jj_consume_token(PARENTESIS_C);
      jj_consume_token(LLAVE_A);
      Sentencias();
      jj_consume_token(LLAVE_C);
    } catch (ParseException ex) {
        processError(ex, "sentencia de while");
        skipTo(PUNTO_COMA, LLAVE_C);
    }
  }

//Sentencia ASIGNACION
  final public void SentenciaAsignacion() throws ParseException, ParseException {
        Token v1;
        Token v2;
        Token v3;
        int aux;
        String res;
        boolean imp = false;
    try {
      v1 = jj_consume_token(VARIABLE);
      jj_consume_token(ASIGNACION);
      TiposAsignaciones();
    v2 = token;
        res = TokenAsignaciones.checkAsing(v1, v2);

        if(res != " ")
        {
                System.out.println(res);
                imp = true;
        }
      label_3:
      while (true) {
        if (jj_2_2(2)) {
          ;
        } else {
          break label_3;
        }
        OpAritmetico();
        TiposAsignaciones();
    v3 = token;
        res = TokenAsignaciones.checkAsing(v1, v3);

        if(res != " " && !imp)
        {
                System.out.println(res);
        }
      }
      jj_consume_token(PUNTO_COMA);
    } catch (ParseException ex) {
    processError(ex, "sentencia de asignacion");
    skipTo(PUNTO_COMA, SENTENCES_BEGIN);
    }
  }

//Sentencia WRITE
  final public void SentenciaWrite() throws ParseException, ParseException {
    Token v1;
    String res;
    try {
      jj_consume_token(IMPRIMIR);
      jj_consume_token(PARENTESIS_A);
      TiposAsignaciones();
            v1 = token;
            res = TokenAsignaciones.checkVariable(v1);

            if(res != " "){
                System.out.println(res);
            }
      jj_consume_token(PARENTESIS_C);
      jj_consume_token(PUNTO_COMA);
    } catch (ParseException ex) {
        processError(ex, "sentencia de impresion");
        skipTo(PUNTO_COMA, SENTENCES_BEGIN);
    }
  }

//Sentencia READ
  final public void SentenciaRead() throws ParseException, ParseException {
    Token v1;
    String res;
    try {
      jj_consume_token(LEER);
      jj_consume_token(PARENTESIS_A);
      v1 = jj_consume_token(VARIABLE);
            res = TokenAsignaciones.checkVariable(v1);

            if(res != " "){
                System.out.println(res);
            }
      jj_consume_token(PARENTESIS_C);
    } catch (ParseException ex) {
        processError(ex, "sentencia de lectura");
        skipTo(PUNTO_COMA, SENTENCES_BEGIN);
    }
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_3_2() {
    if (jj_3R_5()) return true;
    if (jj_3R_6()) return true;
    return false;
  }

  private boolean jj_3R_11() {
    return false;
  }

  private boolean jj_3R_10() {
    if (jj_scan_token(DIVIDIR)) return true;
    return false;
  }

  private boolean jj_3R_9() {
    if (jj_scan_token(MULTIPLICAR)) return true;
    return false;
  }

  private boolean jj_3R_8() {
    if (jj_scan_token(RESTAR)) return true;
    return false;
  }

  private boolean jj_3R_5() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_7()) {
    jj_scanpos = xsp;
    if (jj_3R_8()) {
    jj_scanpos = xsp;
    if (jj_3R_9()) {
    jj_scanpos = xsp;
    if (jj_3R_10()) {
    jj_scanpos = xsp;
    if (jj_3R_11()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_7() {
    if (jj_scan_token(SUMAR)) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_4()) return true;
    return false;
  }

  private boolean jj_3R_6() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(49)) {
    jj_scanpos = xsp;
    if (jj_scan_token(48)) {
    jj_scanpos = xsp;
    if (jj_scan_token(51)) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_4() {
    if (jj_scan_token(VARIABLE)) return true;
    if (jj_scan_token(ASIGNACION)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public JavaPlusTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  /** Whether we are looking ahead. */
  private boolean jj_lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[11];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x3c,0x0,0x0,0x3804000,0x804000,0x3000000,0x2,0x8000,0x2,0xc00000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x3f0,0x0,0x9000,0xb0000,0x29000,0x9000,0x0,0x0,0x0,0x0,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[2];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public JavaPlus(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public JavaPlus(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new JavaPlusTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public JavaPlus(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new JavaPlusTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public JavaPlus(JavaPlusTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(JavaPlusTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = jj_lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List jj_expentries = new java.util.ArrayList();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Iterator it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.add(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[61];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 11; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 61; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 2; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

    }
