options {
    STATIC = false;
    // BUILD_PARSER = false;
    //OUTPUT_DIRECTORY = "compilador";
}
PARSER_BEGIN(JavaPlus)

    //package compilador;

    import java.io.*;
    import java.util.*;
    
    public class JavaPlus{

        private static final String NAME = JavaPlus.class.getSimpleName();
        private static final String PROGRAM = "." + File.separatorChar + NAME;
        private static int index = 0;
		
        private static String source_file = "";
		private static String source_file2 = "";



        private final Integer[] SENTENCES_BEGIN = new Integer[]
        {LEER, IMPRIMIR, CASE, FOR, WHILE, IF, ENTERO, FLOAT, STRING};

        // Lista de errores
        private static final ArrayList<String> errores = new ArrayList<String>();

        private static void setSourceFile(String[] args){

            if(source_file.isEmpty()){

                if(args.length < index + 1){
                    
                    System.err.println("ERROR: Debe de ingresar el archivo del código fuente.");
                    System.out.println();
                    System.exit(-1);
                }

                source_file = args[index++];
                // index = 2
            }
            ensureSourceExists();

        }

        private static void ensureSourceExists(){
            File file = new File(source_file);
            if(!file.exists()){
                
                System.err.println("ERROR: El archivo " + source_file + " no existe.");
                System.out.println();
                System.exit(-1);
            }

        }

        private static boolean checkLex(boolean debug){

            try {

                FileReader sourceFileReader = new FileReader(source_file);


                // Instanciar objeto de TokenManager y obtener todos los tokens. Ej:
                JavaPlusTokenManager lexico = new JavaPlusTokenManager(new SimpleCharStream(sourceFileReader));

                Token t = lexico.getNextToken();
                while(t.kind != JavaPlusTokenManager.EOF) {
                    try {

                        if (t.kind == JavaPlusTokenManager.INVALIDO)
                            throw new TokenMgrError("Error léxico en línea " +
                                    t.beginLine + ", columna " + t.beginColumn +
                                    ". Se encontró símbolo inválido '" + t.image + "'.\n        " +
                                    "Posible solución: Remover símbolo.", TokenMgrError.LEXICAL_ERROR);

                        if (t.kind == JavaPlusTokenManager.NUMERO_INVALIDO)
                            throw new TokenMgrError("Error léxico en línea " +
                                    t.beginLine + ", columna " + t.beginColumn +
                                    ". Se encontró un número inválido '" + t.image + "'.\n        " +
                                    "Posible solución: Remover o revisar número.", TokenMgrError.LEXICAL_ERROR);

                        if(debug)
                            System.out.println(t.image);

                    } catch (TokenMgrError ex) {
                        errores.add(ex.getMessage());
                    } finally {
                        t = lexico.getNextToken();

                    }
                }

            } catch (FileNotFoundException ex) {
                System.err.println("Ha ocurrido un problema con el archivo leído.");
                System.exit(-1);
            }

            return errores.isEmpty();

        }

        //Verifica si tiene errores con la lectura del archivo de
        private static boolean checkSyntax() {

            if (!checkLex(false)) return false;

            try {
                FileReader sourceFileReader = new FileReader(source_file);

                JavaPlus sintactico = new JavaPlus(sourceFileReader);
                sintactico.Principal();

            } catch (FileNotFoundException ex) {
                System.err.println("Ha ocurrido un problema con el archivo leído.");
                System.exit(-1);
            } catch (ParseException ex) {
                processError(ex, "programa principal");
            }

            return errores.isEmpty();
        }

        //verificacion de secuencia de compilacion en caso de ser correcta o incorrecta
        public static void main(String[] args) {
            
            if (args.length > 0) {
            	source_file = args[index];		
            	index++;
            } else {
                System.err.println("Error: No se proporcionó un archivo fuente.");
                System.exit(-1);
            }

            setSourceFile(args);

            // Revisar fase sintactica
            if(checkSyntax()){
                if(TokenAsignaciones.getErr()>0){
                    System.out.println("Total de errores semánticos: " + TokenAsignaciones.getErr());
                }
                else{
                    System.out.println("Análisis correcto.");
                    CToIntermediateCodeConverter.convertir(source_file);
                    ICToObject.convertir("intermedio.txt");
                    source_file2 = source_file.replaceAll(".txt","");

                    int nc = 0;
                    for (int i = 0; i <= source_file2.length()-1; i++) {
                        nc++;
                    }

                    if(nc-1 > 5){
                        nc=5;
                    }
                    //System.out.println(nc);

                    String fileNameWOF = "";
                    for (int i = 0; i <= nc-1; i++) {
                        fileNameWOF = fileNameWOF + source_file2.charAt(i);
                    }

                    OCToAssembler.convertir("objeto.txt","declaraciones.txt",fileNameWOF);

		    String cadenaRetorno="";
		    try{
			    Runtime tiempoEjecucion = Runtime.getRuntime();
			    Process proceso = tiempoEjecucion.exec("cmd.exe /C " + "ml " +  fileNameWOF + ".asm");
			
			    InputStream is = proceso.getInputStream();
			    InputStreamReader isr = new InputStreamReader(is);
			    BufferedReader br = new BufferedReader(isr);

			    System.out.println("Archivo " + fileNameWOF + ".exe generado.");

			    String linea;
			    while ((linea = br.readLine()) != null){
				    cadenaRetorno = cadenaRetorno.concat(linea) + "\n";
			    }
			    br.close();
		    }catch(IOException e){
		        System.out.println("No se pudo generar el archivo ejecutable.");
			    e.printStackTrace();
		    }
		    //System.out.println(cadenaRetorno);
		    
		    

		  
                    System.exit(0);
                }
            }
            else{
                if(TokenAsignaciones.getErr()>0){
                    System.out.println("Total de errores semánticos: " + TokenAsignaciones.getErr() + "\n \n");
                }

                for (int i = 0; i < errores.size(); i++) {
                    System.out.print(i+1 + ". ");
                    System.err.println(errores.get(i));
                    System.out.println();
                }
                System.err.println("Total de errores sintácticos: " + errores.size() + "\n");
            }

            setSourceFile(args);
            System.exit(-1);
        }

        //Funcion para saltar a zona segura en caso de error de lectura de token
        private void skipTo(Integer end, Integer... kinds){

            List<Integer> kindsList = Arrays.asList(kinds);

            HashSet<Integer> cKinds = new HashSet<Integer>(kindsList);
            cKinds.add(end);
            cKinds.add(EOF);

            Token oldToken = token;
            boolean sw = true;
            int selectedKind = JavaPlus.EOF;

            do {
                token = getNextToken();

                for (Integer kind : cKinds) {
                    sw &= token.kind != kind;

                    if (!sw) {
                        selectedKind = kind;
                        break;
                    }
                }

            } while (sw);

            if (selectedKind != end) {
                token = oldToken;
                jj_kind = selectedKind;
            }

        }

        //Funcion para almacenar los errores encontrados
        private static void processError(ParseException ex, String from){

            // Tokens esperados
            StringBuilder expected = new StringBuilder();
            int maxSize = 0;

            for (int i = 0; i < ex.expectedTokenSequences.length; i++) {
                if (maxSize < ex.expectedTokenSequences[i].length) {
                    maxSize = ex.expectedTokenSequences[i].length;
                }
                for (int j = 0; j < ex.expectedTokenSequences[i].length; j++) {
                    expected.append(ex.tokenImage[ex.expectedTokenSequences[i][j]]).append(' ');
                }

            }

            Token t = ex.currentToken;

            // Tokens encontrados
            StringBuilder found = new StringBuilder();
            Token tok = t.next;

            for (int i = 0; i < maxSize; i++) {

                if (i != 0) found.append(" ");

                if (tok.kind == 0) {
                    found.append(tokenImage[0]);
                    break;
                }

                found.append(tokenImage[tok.kind]);

                tok = tok.next;
            }

            String[] founds = found.toString().split(" ");
            String[] expecteds = expected.toString().split(" ");

            StringBuilder msg = new StringBuilder();
            msg.append("Error sintáctico en ");
            msg.append("línea ").append(t.beginLine).append(", columna ").append(t.beginColumn).append('.');

            if (founds.length == 1) {
                msg.append(" Se encontró el símbolo ").append(founds[0]).append('.');
            } else {
                msg.append(" Se encontraron los símbolos:");
                for (String f : founds) {
                    msg.append(" - ").append(f);
                }
                msg.append('.');
            }

            if (expecteds.length == 1){
                msg.append(" Se esperaba:\n").append(expecteds[0]).append('.');
            } else {
                msg.append(" Se esperaba uno de los siguientes:\n");
                for (String e : expecteds) {
                    msg.append(" - ").append(e);
                }
            }

            errores.add(msg.toString());
        }
    }
PARSER_END(JavaPlus)

TOKEN : 
{ 
	  <ASIGNACION : "="> //1
	| <SUMAR : "+" >  //2
	| <RESTAR:"-"> //3
	| <MULTIPLICAR:"*">  //4
	| <DIVIDIR:"/"> //5
	| <INCR: "++" > //6
	| <DECR: "--" > //7
	
}
TOKEN:
{
	  <PUBLIC: "public"> //8
	| <PRIVATE: "private"> //9
	| <STATIC: "static"> //10
	| <VOID: "void"> //11
	| <MAIN: "main()"> //12
	| <PROGRAMA: "Programa" >  //13
	| <IF: "if" > //14
	| <ELSE:"else" > //15
	| <ELSEIF:"elseif" > //16
	| <FOR:"for" > //17
	| <SWITCH:"switch" > //18
	| <CASE:"case" > //19
	| <BREAK:"break" > //20
	| <DEFAUL:"default" > //21
	| <DO:"do" > //22
	| <WHILE:"while" > //23
	| <IMPRIMIR:"printf" > //24
	| <LEER:"scan" > //25
}

TOKEN:
{
      <PARENTESIS_A: "(" > //26
	| <PARENTESIS_C: ")" > //27
	| <LLAVE_A: "{" > //28
	| <LLAVE_C: "}" > //29
	| <DEF: "def">//30
	| <CORCHETE_C: "]" > //31
	| <PUNTO_COMA: ";" > //32
	| <COMA_SIMPLE: "," > //33
	| <PUNTO_SIMPLE: "." > //34
	| <DOUBLECOMMA: "\""> //35
}
TOKEN:
{
	  <EQ: "==" > //36
	| <LE: "<=" > //37
	| <MN: "<" > //38
	| <GE: ">=" > //39
	| <GR: ">" > //40
	| <NE: "!=" > //41
	| <OR: "||" > //42
	| <SCANS: "scans"> //43
}

TOKEN:
{
	  <ENTERO:"int"> //44
	| <FLOAT: "float"> //45
	| <CHR: "chr"> //46
	| <STRING: "string"> //47
	| <NUMERO : (["0"-"9"])+>  //48
	| <VARIABLE : ["a"-"z","A"-"Z"](["a"-"z","A"-"Z","0"-"9","_"])*>  //49
	| <DECIMAL : (["0"-"9"])+["."](["0"-"9"])+ > //50
	| <CADENA : <DOUBLECOMMA>["a"-"z","A"-"Z","0"-"9"," "](["a"-"z","A"-"Z","0"-"9"," ",":",";","."])*<DOUBLECOMMA>> //51
	| <CARAC : "'"["a"-"z","A"-"Z","0"-"9"]"'" >//52
	| <PUNTO_DOBLE : ":"> //53
}

SKIP : 
{ 
	 " "
    |"\t"
    |"\n"
    |"\r"
}
TOKEN: {
    <LETRA: (["a"-"z"]|(["A"-"Z"])(["a"-"z"])|["A"-"Z"])+> 
}
TOKEN : {

    <NUMERO_INVALIDO: ("-" | "" | "+")(<NUMERO>)*("."( <NUMERO> | <LETRA> )* | <LETRA>)+>
    |
    <INVALIDO: ~[]>

}

void Operadores():
{}
{
	    <EQ>
	  | <LE>
	  | <GE>
	  | <NE>
	  | <GR>
	  | <MN>
}
int OpAritmetico():
{}
{
	  (<SUMAR> {return 1;})
	| (<RESTAR> {return 1;})
	| (<MULTIPLICAR> {return 1;})
	| (<DIVIDIR> {return 1;})
	| ({return 0;})

	{return 0;}
}

void TiposDatos() throws ParseException:
{}
{
     <ENTERO> | <STRING>
}

void TiposAsignaciones():
{}
{
	  <VARIABLE> | <NUMERO> | <CADENA>
}

void Principal() throws ParseException:
{
    TokenAsignaciones.SetTables();
}
{
    try{
        <MAIN> <LLAVE_A> Sentencias() <LLAVE_C> <EOF>
    }catch (ParseException ex) {
        processError(ex, "programa principal");
        skipTo(PUNTO_COMA, SENTENCES_BEGIN);
    }
}

void Sentencias():
{}
{
    try{
	(	
	VariablesLocales()
    | SentenciaIf()
	| SentenciaWhile()
	| LOOKAHEAD(2)SentenciaAsignacion(){TokenAsignaciones.segunda = 0;}
	| SentenciaWrite()
	| SentenciaRead()<PUNTO_COMA>
	)*
	} catch (ParseException ex) {
        //processError(ex, "sentencia de si");
        skipTo(PUNTO_COMA, LLAVE_C);
    }
}

//Sentencia de declaración de variables
void VariablesLocales() throws ParseException:
{
	int td;
	Token var;
}
{
    try{
    (
	TiposDatos()
	{
		td = token.kind;
	}
	var = <VARIABLE>
	{
		TokenAsignaciones.InsertarSimbolo(var, td);

	}
	[VariablesAsignacion(var)]

	<PUNTO_COMA>
    )
    }catch (ParseException ex) {
        processError(ex, "sentencia de variables locales");
        skipTo(PUNTO_COMA, SENTENCES_BEGIN);
    }
}

//Sentencia de asignacion en las declaraciones de variables
void VariablesAsignacion(Token v1) throws ParseException:
{
	Token v2;
	Token v3;
	String res;
	boolean imp = false;
}
{
        <ASIGNACION>
        (TiposAsignaciones())
        {
            v2 = token;
            res = TokenAsignaciones.checkAsing(v1, v2);

            if(res != " ")
            {
                System.out.println(res);
                imp = true;
            }
        }
}

//Sentencia IF
void SentenciaIf() throws ParseException:
{}
{
    try {
       <IF><PARENTESIS_A> Comparaciones() <PARENTESIS_C> <LLAVE_A> Sentencias() <LLAVE_C> (SentenciaElse())*
    } catch (ParseException ex) {
        processError(ex, "sentencia de si");
        skipTo(PUNTO_COMA, LLAVE_C);
    }
}

//Sentencia ELSE
void SentenciaElse() throws ParseException:
{}
{
    try {
       <ELSE><LLAVE_A> Sentencias() <LLAVE_C>
    } catch (ParseException ex) {
        processError(ex, "sentencia de sino");
        skipTo(PUNTO_COMA, LLAVE_C);
    }
}

//Sentencias de las comparaciones
void Comparaciones():
{
    Token v1;
    String res;
}
{
	<VARIABLE>
	{
        v1 = token;
        res = TokenAsignaciones.checkVariable(v1);

        if(res != " "){
            System.out.println(res);
        }
     }
	Operadores()
	<VARIABLE>
	{
        v1 = token;
        res = TokenAsignaciones.checkVariable(v1);

        if(res != " "){
            System.out.println(res);
        }
    }
}

void DeclaracionUnaVariable():
{
	int td;
	Token var;	
}
{
       (TiposDatos())
	{
		td = token.kind;
	}
	var = <VARIABLE>
	{		
		TokenAsignaciones.InsertarSimbolo(var, td);
	} 
	[VariablesAsignacion(var)]			
}

//Sentencia DO
void SentenciaDo() throws ParseException:
{}
{
    try {
       <DO> <LLAVE_A> Sentencias() <LLAVE_C> <WHILE> <PARENTESIS_A> Comparaciones() <PARENTESIS_C> | SentenciaWhile()
       } catch (ParseException ex) {
        processError(ex, "sentencia de Do");
        skipTo(PUNTO_COMA, LLAVE_C);
    }
}
void SentenciaWhile() throws ParseException:
{}
{
    try {
       <WHILE> <PARENTESIS_A> Comparaciones() <PARENTESIS_C> <LLAVE_A> Sentencias() <LLAVE_C>
       } catch (ParseException ex) {
        processError(ex, "sentencia de while");
        skipTo(PUNTO_COMA, LLAVE_C);
    }
}

//Sentencia ASIGNACION
void SentenciaAsignacion() throws ParseException:
{
	Token v1;
	Token v2;
	Token v3;
	int aux;
	String res;
	boolean imp = false;
}
{
  try{
    v1 = <VARIABLE>
  (<ASIGNACION> 
  (TiposAsignaciones())
  {  
    v2 = token;
	res = TokenAsignaciones.checkAsing(v1, v2);
	
	if(res != " ")
	{
		System.out.println(res);
		imp = true;
	}
  }
  (LOOKAHEAD(2)OpAritmetico()
  TiposAsignaciones()
  {
    v3 = token;
	res = TokenAsignaciones.checkAsing(v1, v3);

	if(res != " " && !imp)
	{
		System.out.println(res);
	}
  })*)
  <PUNTO_COMA>
   }catch (ParseException ex) {
    processError(ex, "sentencia de asignacion");
    skipTo(PUNTO_COMA, SENTENCES_BEGIN);
   }
}

//Sentencia WRITE
void SentenciaWrite() throws ParseException:
{
    Token v1;
    String res;
 }
{
    try {
        <IMPRIMIR> <PARENTESIS_A>
        TiposAsignaciones()
        {
            v1 = token;
            res = TokenAsignaciones.checkVariable(v1);

            if(res != " "){
                System.out.println(res);
            }
        } <PARENTESIS_C> <PUNTO_COMA>
    } catch (ParseException ex) {
        processError(ex, "sentencia de impresion");
        skipTo(PUNTO_COMA, SENTENCES_BEGIN);
    }
}

//Sentencia READ
void SentenciaRead() throws ParseException:
{
    Token v1;
    String res;
}
{
    try {
        <LEER> <PARENTESIS_A> (
        v1 = <VARIABLE>
        {
            res = TokenAsignaciones.checkVariable(v1);

            if(res != " "){
                System.out.println(res);
            }


        }
        )<PARENTESIS_C>
    } catch (ParseException ex) {
        processError(ex, "sentencia de lectura");
        skipTo(PUNTO_COMA, SENTENCES_BEGIN);
    }
}
